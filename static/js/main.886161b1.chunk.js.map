{"version":3,"sources":["assets/ethereum-logo.svg","components/Home.tsx","services/ethereum/BaseContract.ts","services/ethereum/MicropaymentsFactory.ts","hooks/useContractFactory.tsx","hooks/useWeb3.tsx","context/SmartContractContext.tsx","assets/metamask.svg","components/MetaMaskIcon.tsx","services/ethereum/MicropaymentsContract.ts","components/LoaderButton.tsx","components/Contractor.tsx","components/Company.tsx","components/ContractsTable.tsx","services/payments/OffChainValidator.ts","components/ContractDetails.tsx","components/SignatureDetailsModal.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Home","id","Navbar","bg","expand","className","fixed","Container","Brand","href","Toggle","Collapse","Nav","Link","Row","Col","Image","width","src","Logo","BaseContract","_web3","abi","contractAddress","userAccount","contractInstance","instanceAddress","this","eth","Contract","newAccount","account","a","methods","owner","call","from","currentOwner","toLocaleUpperCase","MicropaymentsFactory","name","value","createMicropayment","send","getMicropaymentsContracts","getMicropaymentsContractAddress","location","deleteContract","callback","filter","events","MicropaymentsCreated","on","off","useContractFactory","provider","address","useState","useWeb3","setAccount","Web3","window","ethereum","web3","connectToMetaMask","requestAccounts","accounts","length","useEffect","getAccountData","getAccounts","currentProvider","event","networks","process","ContractFactoryContext","React","createContext","undefined","MetaMaskContext","AccountContext","SmartContractContextProvider","props","Provider","children","useMetaMask","context","useContext","Error","useAccount","MetaMaskIcon","MetaMask","alt","MicropaymentsContract","amount","nonce","signature","claimPayment","getBalance","PaymentClaimed","LoaderButton","Button","type","showLoader","Spinner","animation","as","size","defaultProps","WalletStatus","Contractor","balance","setBalance","Locked","walletStatus","setWalletStatus","showModal","setShowModal","claimSpinner","setClaimSpinner","connect","onAccountChange","Connected","updateBalance","useCallback","accountBalance","fromWei","claimCallback","micropaymentsContract","offPaymentClaimed","preventDefault","Object","fromEntries","FormData","target","onPaymentClaimed","toWei","console","log","Card","border","Header","Title","Subtitle","Body","variant","onClick","Modal","show","onHide","Form","onSubmit","closeButton","FloatingLabel","label","FormControl","placeholder","required","InputGroup","Text","style","minHeight","maxHeight","Footer","ContractsTable","Table","striped","hover","contractData","map","contract","index","rowSelectedCallback","OffChainValidator","_contractAddress","recipient","signerAddress","hash","constructMessage","personal","sign","toString","expectedSigner","message","prefixed","recoverSigner","toLowerCase","stripHexPrefix","soliditySHA3","split","fromRpcSig","publicKey","ecrecover","v","r","s","pubToAddress","ContractDetails","micropaymentInstance","setMicropaymentInstance","signLoader","setSignLoader","updateInstanceData","data","onSign","targetAddress","allowedAmount","offChainValidator","Date","now","signTransaction","onSignConfirm","claimerAddress","CloseButton","closeCallback","Accordion","defaultActiveKey","Item","eventKey","OverlayTrigger","placement","overlay","Tooltip","onDeposit","onDelete","SignatureDetailsModal","onClose","centered","backdrop","color","disabled","claimInfo","Company","setClaimInfo","micropaymentInstanceData","setMicropaymentInstanceData","availableContracts","setAvailableContracts","showDetails","setShowDetails","creatingContract","setCreatingContract","signOrder","setSignOrder","showToast","setShowToast","createSpinner","setCreateSpinner","contractFactory","useContractFactoryContext","refreshAvilableContracts","contracts","isOwner","updateUserAccount","onMicropaymentsCreated","deleteInstance","onConfirmCreate","claim","error","Toast","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.886161b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ethereum-logo.b3ec96d9.svg\";","import React, { FC } from 'react';\r\nimport { Col, Container, Image, Nav, Navbar, Row } from 'react-bootstrap';\r\nimport '../styles/Home.scss';\r\nimport Logo from '../assets/ethereum-logo.svg';\r\n\r\nconst Home: FC = () => (\r\n  <div id=\"home\">\r\n    <Navbar bg=\"primary\" expand=\"lg\" className=\"navbar\" fixed=\"top\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#\">Micropayments Factory</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n        <Navbar.Collapse id=\"navbarScroll\" className=\"justify-content-end\">\r\n          <Nav>\r\n            <Nav.Link href=\"#/company\">Company</Nav.Link>\r\n            <Nav.Link href=\"#/contractor\">Contractor</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n    <Container className=\"content\">\r\n      <Row>\r\n        <Col>\r\n          <div>\r\n            <h2>Manage payments using this integrated platform.</h2>\r\n            <h4>Just create contracts and enable payments by delivering a signed message. Easy for you as employer or employee.</h4>\r\n          </div>\r\n        </Col>\r\n        <Col>\r\n          <Image width=\"150\" src={Logo} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","import Web3 from 'web3';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport { AbiItem } from 'web3-utils';\r\nimport IBaseContract from './IBaseContract';\r\n\r\nexport default class BaseContract implements IBaseContract {\r\n  contractInstance: Contract;\r\n  userAccount: string;\r\n  instanceAddress: string;\r\n\r\n  constructor(_web3: Web3, abi: AbiItem[], contractAddress: string, userAccount = '') {\r\n    this.contractInstance = new _web3.eth.Contract(abi, contractAddress);\r\n    this.userAccount = userAccount;\r\n    this.instanceAddress = contractAddress;\r\n  }\r\n\r\n  updateUserAccount(newAccount: string) {\r\n    this.userAccount = newAccount;\r\n  }\r\n\r\n  async isOwner(account: string): Promise<boolean> {\r\n    const currentOwner = await this.contractInstance.methods.owner().call({ from: account });\r\n    return currentOwner?.toLocaleUpperCase() === account?.toLocaleUpperCase();\r\n  }\r\n}\r\n","import BaseContract from './BaseContract';\r\nimport IMicropaymentsFactory from './IMicropaymentsFactory';\r\nimport { MicropaymentsData } from './MicropaymentsDataType';\r\n\r\nexport default class MicropaymentsFactory extends BaseContract implements IMicropaymentsFactory {\r\n  async createMicropayment(name: string, value: string): Promise<void> {\r\n    return this.contractInstance.methods.createMicropayment(name).send({ from: this.userAccount, value });\r\n  }\r\n\r\n  async getMicropaymentsContracts(): Promise<Array<MicropaymentsData>> {\r\n    return this.contractInstance.methods.getMicropaymentsContracts().call({ from: this.userAccount });\r\n  }\r\n\r\n  async getMicropaymentsContractAddress(name: string): Promise<string> {\r\n    return this.contractInstance.methods.getMicropaymentsContractAddress(name).call({ from: this.userAccount });\r\n  }\r\n\r\n  updateUserAccount(newAccount: string) {\r\n    this.userAccount = newAccount;\r\n  }\r\n\r\n  deleteContract(location: string) {\r\n    return this.contractInstance.methods.deleteContract(location).send({ from: this.userAccount });\r\n  }\r\n\r\n  onMicropaymentsCreated(from: string, callback: (data: any) => void) {\r\n    let filter = {};\r\n    if (from) {\r\n      filter = {\r\n        from,\r\n      };\r\n    }\r\n    this.contractInstance.events.MicropaymentsCreated({ filter }).on('data', callback);\r\n  }\r\n\r\n  offMicropaymentsCreated(from: string, callback: (data: any) => void) {\r\n    let filter = {};\r\n    if (from) {\r\n      filter = {\r\n        from,\r\n      };\r\n    }\r\n    this.contractInstance.events.MicropaymentsCreated({ filter }).off('data', callback);\r\n  }\r\n}\r\n","import { useState } from 'react';\nimport Web3 from 'web3';\nimport { AbiItem } from 'web3-utils';\nimport MicropaymentsFactory from '../services/ethereum/MicropaymentsFactory';\nimport IMicropaymentsFactory from '../services/ethereum/IMicropaymentsFactory';\n\nconst useContractFactory = (provider: Web3, abi: AbiItem[], address: string) => {\n  const [contractInstance] = useState<IMicropaymentsFactory>(new MicropaymentsFactory(provider, abi, address));\n  return contractInstance;\n};\n\nexport default useContractFactory;\n","import { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nconst useWeb3 = () => {\n  const [account, setAccount] = useState<string>('');\n  const [web3] = useState<Web3>(new Web3((window as any).ethereum));\n\n  const connectToMetaMask = async () => {\n    const accounts = await web3.eth.requestAccounts();\n    setAccount(accounts.length ? accounts[0] : '');\n  };\n\n  useEffect(() => {\n    const accountsChangedCallback = (event: string[]): void => {\n      setAccount(event.length ? event[0] : '');\n    };\n\n    const getAccountData = async () => {\n      const accounts = await web3.eth.getAccounts();\n      if (!accounts.length) return;\n      setAccount(accounts[0]);\n    };\n\n    if (web3) {\n      (web3.currentProvider as any).on('accountsChanged', accountsChangedCallback);\n      getAccountData();\n    }\n    // return () => {\n    //   (web3.currentProvider as any).off('accountsChanged', accountsChangedCallback);\n    // };\n  }, [web3]);\n\n  return { web3, account, connectToMetaMask };\n};\n\nexport default useWeb3;\n","import React, { FC } from 'react';\nimport { AbiItem } from 'web3-utils';\nimport Web3 from 'web3';\nimport IMicropaymentsFactory from '../services/ethereum/IMicropaymentsFactory';\nimport useContractFactory from '../hooks/useContractFactory';\nimport useWeb3 from '../hooks/useWeb3';\nimport { abi, networks } from '../assets/MicropaymentsFactory.json';\n\nconst newtworkId = process.env.REACT_APP_EHTEREUM_NETWORK_ID;\nconst contractAddress = (networks as any)[newtworkId as string].address;\n\nconst ContractFactoryContext = React.createContext<IMicropaymentsFactory | undefined>(undefined);\nconst MetaMaskContext = React.createContext<(() => Promise<void>) | undefined>(undefined);\nconst AccountContext = React.createContext<string>('');\n\ninterface ISmartContractContextProvider {\n  children: React.ReactNode;\n}\n\nconst SmartContractContextProvider: FC<ISmartContractContextProvider> = (props) => {\n  const { web3, account, connectToMetaMask } = useWeb3();\n  const contractInstance = useContractFactory(web3 as Web3, abi as AbiItem[], contractAddress);\n  return (\n    <AccountContext.Provider value={account}>\n      <MetaMaskContext.Provider value={connectToMetaMask}>\n        <ContractFactoryContext.Provider value={contractInstance}>{props.children}</ContractFactoryContext.Provider>\n      </MetaMaskContext.Provider>\n    </AccountContext.Provider>\n  );\n};\n\nfunction useContractFactoryContext() {\n  const context = React.useContext(ContractFactoryContext);\n  if (context === undefined) {\n    throw new Error('useContractFactoryContext must be used within an SmartContractContextProvider');\n  }\n  return context;\n}\n\nfunction useMetaMask() {\n  const context = React.useContext(MetaMaskContext);\n  if (context === undefined) {\n    throw new Error('useMetaMask must be used within an SmartContractContextProvider');\n  }\n  return context;\n}\n\nfunction useAccount() {\n  const context = React.useContext(AccountContext);\n  if (context === undefined) {\n    throw new Error('useAccount must be used within an SmartContractContextProvider');\n  }\n  return context;\n}\n\nexport { SmartContractContextProvider, useContractFactoryContext, useMetaMask, useAccount };\n","export default __webpack_public_path__ + \"static/media/metamask.09e5f554.svg\";","import React, { FC } from 'react';\nimport MetaMask from '../assets/metamask.svg';\nimport '../styles/MetaMaskIcon.scss';\n\nconst MetaMaskIcon: FC = () => {\n  return <img src={MetaMask} id=\"metamask-icon\" alt=\"MetaMask\" />;\n};\n\nexport default MetaMaskIcon;\n","import BaseContract from './BaseContract';\nimport IMicropaymentsContract from './IMicropaymentsContract';\n\nexport default class MicropaymentsContract extends BaseContract implements IMicropaymentsContract {\n  async claimPayment(amount: string, nonce: number, signature: string): Promise<void> {\n    return this.contractInstance.methods.claimPayment(amount, nonce, signature).send({ from: this.userAccount });\n  }\n\n  async getBalance(): Promise<string> {\n    return this.contractInstance.methods.getBalance().call({ from: this.userAccount });\n  }\n\n  onPaymentClaimed(from: string, callback: (data: any) => void) {\n    let filter = {};\n    if (from) {\n      filter = {\n        from,\n      };\n    }\n    this.contractInstance.events.PaymentClaimed({ filter }).on('data', callback);\n  }\n\n  offPaymentClaimed(from: string, callback: (data: any) => void) {\n    let filter = {};\n    if (from) {\n      filter = {\n        from,\n      };\n    }\n    this.contractInstance.events.PaymentClaimed({ filter }).off('data', callback);\n  }\n}\n","import React, { FC } from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\n\r\ninterface ILoaderButton {\r\n  type?: 'submit' | 'reset' | 'button' | undefined;\r\n  showLoader: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst LoaderButton: FC<ILoaderButton> = (props: ILoaderButton) => {\r\n  return (\r\n    <Button type={props.type}>\r\n      {props.showLoader ? <Spinner animation=\"border\" as=\"span\" size=\"sm\" /> : null}\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nLoaderButton.defaultProps = {\r\n  type: 'button',\r\n};\r\n\r\nexport default LoaderButton;\r\n","import React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Row, Card, Modal, FormControl, InputGroup, FloatingLabel, Form } from 'react-bootstrap';\r\nimport { AbiItem, fromWei, toWei } from 'web3-utils';\r\nimport { useMetaMask, useAccount } from '../context/SmartContractContext';\r\nimport useWeb3 from '../hooks/useWeb3';\r\nimport '../styles/Contractor.scss';\r\nimport MetaMaskIcon from './MetaMaskIcon';\r\nimport { ClaimInfo } from '../assets/formData/ClaimInfo';\r\nimport MicropaymentsContract from '../services/ethereum/MicropaymentsContract';\r\nimport { abi } from '../assets/Micropayments.json';\r\nimport LoaderButton from './LoaderButton';\r\n\r\nenum WalletStatus {\r\n  Locked = 'Locked',\r\n  Connected = 'Connected',\r\n}\r\n\r\nconst Contractor: FC = () => {\r\n  const [balance, setBalance] = useState<string>('0');\r\n  const [walletStatus, setWalletStatus] = useState<WalletStatus>(WalletStatus.Locked);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [claimSpinner, setClaimSpinner] = useState(false);\r\n  const connect = useMetaMask();\r\n  const account = useAccount();\r\n  const { web3 } = useWeb3();\r\n\r\n  // #region Account Change\r\n  useEffect(() => {\r\n    const onAccountChange = async () => {\r\n      if (!account) {\r\n        setWalletStatus(WalletStatus.Locked);\r\n        return;\r\n      }\r\n      setWalletStatus(WalletStatus.Connected);\r\n    };\r\n\r\n    onAccountChange();\r\n  }, [account]);\r\n  // #endregion\r\n\r\n  const updateBalance = useCallback(async () => {\r\n    const accountBalance = await web3.eth.getBalance(account);\r\n    setBalance(fromWei(accountBalance));\r\n  }, [account, web3]);\r\n\r\n  useEffect(() => {\r\n    if (walletStatus !== WalletStatus.Connected) return;\r\n    updateBalance();\r\n  }, [walletStatus, updateBalance]);\r\n\r\n  const claimPayment = async (event: any) => {\r\n    const claimCallback = () => {\r\n      updateBalance();\r\n      setClaimSpinner(false);\r\n      setShowModal(false);\r\n      micropaymentsContract.offPaymentClaimed(account, claimCallback);\r\n    };\r\n\r\n    event.preventDefault();\r\n    setClaimSpinner(true);\r\n    const { contractAddress, amount, nonce, signature } = Object.fromEntries(new FormData(event.target)) as unknown as ClaimInfo;\r\n    const micropaymentsContract = new MicropaymentsContract(web3, abi as AbiItem[], contractAddress, account);\r\n    micropaymentsContract.onPaymentClaimed(account, claimCallback);\r\n    try {\r\n      await micropaymentsContract.claimPayment(toWei(amount), nonce, signature);\r\n    } catch (e) {\r\n      console.log(e);\r\n      claimCallback();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"contractor\">\r\n      <Container className=\"content\">\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"text-center\" border=\"dark\" bg=\"light\">\r\n              <Card.Header>Your account&apos;s balance</Card.Header>\r\n              <Card.Title as=\"h1\">{balance} ETH</Card.Title>\r\n              <Card.Subtitle className=\"mb-2 text-muted\">{account}</Card.Subtitle>\r\n              <Card.Body className=\"d-flex justify-content-center\">\r\n                {walletStatus === WalletStatus.Connected ? (\r\n                  <Button variant=\"secondary\" onClick={() => setShowModal(true)}>\r\n                    Claim a payment\r\n                  </Button>\r\n                ) : (\r\n                  <Button variant=\"secondary\" className=\"d-flex\" onClick={connect}>\r\n                    <MetaMaskIcon />\r\n                    <div>Connect to MetaMask</div>\r\n                  </Button>\r\n                )}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <Modal show={showModal} onHide={() => setShowModal(false)} className=\"contractor-modal\">\r\n        <Form onSubmit={claimPayment}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Claim your payment</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <FloatingLabel label=\"Contract Address\" className=\"mb-3\">\r\n              <FormControl name=\"contractAddress\" placeholder=\"0x...\" required />\r\n            </FloatingLabel>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl name=\"amount\" placeholder=\"0.0000\" />\r\n              <InputGroup.Text>ETH</InputGroup.Text>\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl name=\"nonce\" placeholder=\"0\" />\r\n            </InputGroup>\r\n            <FloatingLabel label=\"Signature\" className=\"mb-3\">\r\n              <FormControl style={{ minHeight: '150px', maxHeight: '250px' }} as=\"textarea\" name=\"signature\" placeholder=\"0x...\" />\r\n            </FloatingLabel>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <LoaderButton type=\"submit\" showLoader={claimSpinner}>\r\n              &nbsp;Confirm&nbsp;\r\n            </LoaderButton>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contractor;\r\n","import React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport { Button, Modal, FloatingLabel, FormControl, InputGroup, Toast, Form } from 'react-bootstrap';\r\nimport { FaRegPlusSquare } from 'react-icons/fa';\r\nimport { toWei } from 'web3-utils';\r\nimport { CreateMicropaymentData } from '../assets/formData/CreateMicropaymentData';\r\nimport { useAccount, useContractFactoryContext, useMetaMask } from '../context/SmartContractContext';\r\nimport { MicropaymentsData } from '../services/ethereum/MicropaymentsDataType';\r\nimport '../styles/Company.scss';\r\nimport ContractsTable from './ContractsTable';\r\nimport MetaMaskIcon from './MetaMaskIcon';\r\nimport { ClaimInfo } from '../assets/formData/ClaimInfo';\r\nimport ContractDetails from './ContractDetails';\r\nimport SignatureDetailsModal from './SignatureDetailsModal';\r\nimport LoaderButton from './LoaderButton';\r\n\r\nenum WalletStatus {\r\n  Locked = 'Locked',\r\n  Connected = 'Connected',\r\n}\r\n\r\nconst Company: FC = () => {\r\n  const [claimInfo, setClaimInfo] = useState<ClaimInfo>({ amount: '0', claimerAddress: '0x0', contractAddress: '0x0', nonce: 0, signature: '0x0' });\r\n  const [micropaymentInstanceData, setMicropaymentInstanceData] = useState<MicropaymentsData>({ location: '0x0', name: '' });\r\n  const [availableContracts, setAvailableContracts] = useState<Array<MicropaymentsData>>([]);\r\n  const [walletStatus, setWalletStatus] = useState<WalletStatus>(WalletStatus.Locked);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n  const [creatingContract, setCreatingContract] = useState(false);\r\n  const [signOrder, setSignOrder] = useState(false);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [createSpinner, setCreateSpinner] = useState(false);\r\n  const connect = useMetaMask();\r\n  const account = useAccount();\r\n  const contractFactory = useContractFactoryContext();\r\n\r\n  // #region Get Contracts\r\n  const refreshAvilableContracts = useCallback(async () => {\r\n    const contracts = await contractFactory.getMicropaymentsContracts();\r\n    setAvailableContracts(contracts);\r\n  }, [contractFactory]);\r\n\r\n  useEffect(() => {\r\n    if (walletStatus === WalletStatus.Connected) refreshAvilableContracts();\r\n  }, [refreshAvilableContracts, walletStatus]);\r\n  // #endregion\r\n\r\n  // #region Account Change\r\n  useEffect(() => {\r\n    const onAccountChange = async () => {\r\n      if (!account || !contractFactory) {\r\n        setShowToast(false);\r\n        setWalletStatus(WalletStatus.Locked);\r\n        return;\r\n      }\r\n      if (!(await contractFactory.isOwner(account))) {\r\n        setShowToast(true);\r\n        setWalletStatus(WalletStatus.Locked);\r\n        return;\r\n      }\r\n      contractFactory.updateUserAccount(account);\r\n      contractFactory.onMicropaymentsCreated(account, () => {\r\n        setCreateSpinner(false);\r\n        setCreatingContract(false);\r\n        refreshAvilableContracts();\r\n      });\r\n      setShowToast(false);\r\n      setWalletStatus(WalletStatus.Connected);\r\n    };\r\n\r\n    onAccountChange();\r\n  }, [account, contractFactory, refreshAvilableContracts]);\r\n  // #endregion\r\n\r\n  // #region Instance Selected\r\n  const onSelectContract = (contractData: MicropaymentsData) => {\r\n    setMicropaymentInstanceData(contractData);\r\n    setShowDetails(true);\r\n  };\r\n  // #endregion\r\n\r\n  // #region Instance actions\r\n  const depositToInstance = () => {\r\n    console.error('deposit eth to this contract is not yet implemented');\r\n  };\r\n\r\n  const deleteInstance = async (address: string) => {\r\n    await contractFactory.deleteContract(address);\r\n    setShowDetails(false);\r\n    refreshAvilableContracts();\r\n  };\r\n\r\n  const onSignConfirm = (claim: ClaimInfo) => {\r\n    setClaimInfo(claim);\r\n    setSignOrder(true);\r\n  };\r\n  // #endregion\r\n\r\n  // #region Create Contract\r\n  const onCreateContract = () => {\r\n    setCreatingContract(true);\r\n  };\r\n\r\n  const onConfirmCreate = async (event: any) => {\r\n    try {\r\n      event.preventDefault();\r\n      setCreateSpinner(true);\r\n      const { name, value } = Object.fromEntries(new FormData(event.target)) as unknown as CreateMicropaymentData;\r\n      await contractFactory.createMicropayment(name, toWei(value));\r\n    } catch (e) {\r\n      console.log(e);\r\n      setCreateSpinner(false);\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div id=\"company\">\r\n      <div className=\"content\">\r\n        <div className=\"table-container\">\r\n          <div className=\"actions-container\">\r\n            <Button variant=\"primary\" className=\"d-flex justify-content-center align-items-center\" onClick={onCreateContract}>\r\n              <FaRegPlusSquare />\r\n              <div>Create a Contract</div>\r\n            </Button>\r\n          </div>\r\n          <ContractsTable contractData={availableContracts} rowSelectedCallback={onSelectContract} />\r\n        </div>\r\n        {showDetails && (\r\n          <div id=\"contract-side-card\">\r\n            <ContractDetails\r\n              closeCallback={() => setShowDetails(false)}\r\n              onSignConfirm={onSignConfirm}\r\n              onDeposit={depositToInstance}\r\n              onDelete={deleteInstance}\r\n              data={micropaymentInstanceData}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <Modal show={walletStatus === WalletStatus.Locked} centered>\r\n        <Modal.Body className=\"text-center\">\r\n          <div>Please, connnect your wallet to continue.</div>\r\n          {showToast ? (\r\n            <Toast className=\"d-inline-block m-1\" bg=\"danger\">\r\n              <Toast.Body>\r\n                <strong>Your are not the owner of this company, please select another account.</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          ) : null}\r\n        </Modal.Body>\r\n        {!showToast && (\r\n          <Modal.Footer className=\"d-flex justify-content-center\">\r\n            <Button variant=\"primary\" onClick={connect} className=\"d-flex\">\r\n              <MetaMaskIcon />\r\n              <div>Connect with MetaMask</div>\r\n            </Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n      <Modal show={creatingContract} onHide={() => setCreatingContract(false)} centered>\r\n        <Form onSubmit={onConfirmCreate}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>New Contract</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <FloatingLabel label=\"Contract Name\" className=\"mb-3\">\r\n              <FormControl name=\"name\" placeholder=\"choose a name...\" required />\r\n            </FloatingLabel>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl name=\"value\" placeholder=\"0.0000\" required />\r\n              <InputGroup.Text>ETH</InputGroup.Text>\r\n            </InputGroup>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <LoaderButton type=\"submit\" showLoader={createSpinner}>\r\n              &nbsp;Confirm&nbsp;\r\n            </LoaderButton>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <SignatureDetailsModal claimInfo={claimInfo} show={signOrder} onClose={() => setSignOrder(false)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Company;\r\n","import React, { FC } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { MicropaymentsData } from '../services/ethereum/MicropaymentsDataType';\r\nimport '../styles/ContractsTable.scss';\r\n\r\ninterface IContractsTable {\r\n  contractData: Array<MicropaymentsData>;\r\n  rowSelectedCallback: (contractData: MicropaymentsData) => Promise<void> | void;\r\n}\r\n\r\nconst ContractsTable: FC<IContractsTable> = (props: IContractsTable) => {\r\n  return (\r\n    <div id=\"contracts-table\">\r\n      <Table striped hover size=\"sm\" variant=\"primary\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Address</th>\r\n            <th>Name</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.contractData.map((contract, index) => (\r\n            <tr key={contract.location} onClick={() => props.rowSelectedCallback(contract)}>\r\n              <td>{index}</td>\r\n              <td>{contract.location}</td>\r\n              <td>{contract.name}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractsTable;\r\n","import Web3 from 'web3';\r\nimport { fromRpcSig, ecrecover, pubToAddress, stripHexPrefix } from 'ethereumjs-util';\r\nimport { soliditySHA3 } from 'ethereumjs-abi';\r\nimport IOffChainValidator from './IOffChainValidator';\r\n\r\nexport default class OffChainValidator implements IOffChainValidator {\r\n  private _web3: Web3;\r\n  private _contractAddress: string;\r\n  constructor(web3: Web3, contractAddress: string) {\r\n    this._web3 = web3;\r\n    this._contractAddress = contractAddress;\r\n  }\r\n\r\n  async signTransaction(recipient: string, amount: string, nonce: number, signerAddress: string): Promise<string> {\r\n    const hash = this.constructMessage(recipient, amount, nonce);\r\n    return this._web3.eth.personal.sign(`0x${hash.toString('hex')}`, signerAddress, '');\r\n  }\r\n\r\n  isValidSignature(recipient: string, amount: string, nonce: number, signature: string, expectedSigner: string): boolean {\r\n    const message = OffChainValidator.prefixed(this.constructMessage(recipient, amount, nonce));\r\n    const signer = OffChainValidator.recoverSigner(message, signature);\r\n    return signer.toLowerCase() === stripHexPrefix(expectedSigner).toLowerCase();\r\n  }\r\n\r\n  private constructMessage(recipient: string, amount: string, nonce: number): Buffer {\r\n    return soliditySHA3(['address', 'uint256', 'uint256', 'address'], [recipient, amount, nonce, this._contractAddress]);\r\n  }\r\n\r\n  private static prefixed(hash: Buffer): Buffer {\r\n    return soliditySHA3(['string', 'bytes32'], ['\\x19Ethereum Signed Message:\\n32', `0x${hash.toString('hex')}`]);\r\n  }\r\n\r\n  private static recoverSigner(message: Buffer, signature: string): string {\r\n    const split = fromRpcSig(signature);\r\n    const publicKey = ecrecover(message, split.v, split.r, split.s);\r\n    const signer = pubToAddress(publicKey).toString('hex');\r\n    return signer;\r\n  }\r\n}\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport { Button, Card, CloseButton, Tooltip, OverlayTrigger, FloatingLabel, FormControl, InputGroup, Accordion, Form } from 'react-bootstrap';\r\nimport { FaMoneyBillAlt, FaTrash } from 'react-icons/fa';\r\nimport { fromWei, AbiItem, toWei } from 'web3-utils';\r\nimport { useAccount } from '../context/SmartContractContext';\r\nimport useWeb3 from '../hooks/useWeb3';\r\nimport { MicropaymentsData } from '../services/ethereum/MicropaymentsDataType';\r\nimport '../styles/ContractDetails.scss';\r\nimport { abi } from '../assets/Micropayments.json';\r\nimport IMicropaymentsContract from '../services/ethereum/IMicropaymentsContract';\r\nimport MicropaymentsContract from '../services/ethereum/MicropaymentsContract';\r\nimport { GenerateSignatureInputData } from '../assets/formData/GenerateSignatureInputData';\r\nimport OffChainValidator from '../services/payments/OffChainValidator';\r\nimport { ClaimInfo } from '../assets/formData/ClaimInfo';\r\nimport LoaderButton from './LoaderButton';\r\n\r\ninterface IContractDetails {\r\n  closeCallback: () => Promise<void> | void;\r\n  onSignConfirm: (claimInfo: ClaimInfo) => Promise<void> | void;\r\n  onDeposit: () => Promise<void> | void;\r\n  onDelete: (address: string) => Promise<void> | void;\r\n  data: MicropaymentsData;\r\n}\r\n\r\nconst ContractDetails: FC<IContractDetails> = (props: IContractDetails) => {\r\n  const account = useAccount();\r\n  const { web3 } = useWeb3();\r\n  const [micropaymentInstance, setMicropaymentInstance] = useState<IMicropaymentsContract>();\r\n  const [balance, setBalance] = useState<string>('');\r\n  const [signLoader, setSignLoader] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const updateInstanceData = async () => {\r\n      if (!micropaymentInstance) return;\r\n      setBalance(await micropaymentInstance.getBalance());\r\n    };\r\n\r\n    updateInstanceData();\r\n  }, [micropaymentInstance]);\r\n\r\n  useEffect(() => {\r\n    if (!web3) return;\r\n    if (!account) return;\r\n    if (!props.data.location) return;\r\n    setMicropaymentInstance(new MicropaymentsContract(web3, abi as AbiItem[], props.data.location, account));\r\n  }, [props.data, web3, account]);\r\n\r\n  const onSign = async (event: any) => {\r\n    try {\r\n      const instanceAddress = props.data.location;\r\n      event.preventDefault();\r\n      setSignLoader(true);\r\n      const { targetAddress, allowedAmount } = Object.fromEntries(new FormData(event.target)) as unknown as GenerateSignatureInputData;\r\n      const offChainValidator = new OffChainValidator(web3, instanceAddress);\r\n      const nonce = Date.now();\r\n      const signature = await offChainValidator.signTransaction(targetAddress, toWei(allowedAmount), nonce, account);\r\n      props.onSignConfirm({\r\n        amount: allowedAmount,\r\n        claimerAddress: targetAddress,\r\n        nonce,\r\n        signature,\r\n        contractAddress: instanceAddress,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n    setSignLoader(false);\r\n  };\r\n\r\n  return (\r\n    <Card id=\"contract-details\" border=\"dark\" bg=\"light\">\r\n      <Card.Header className=\"d-flex justify-content-between\">\r\n        <div>Contract Details</div>\r\n        <CloseButton onClick={props.closeCallback} />\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Card.Title>{props.data?.name}</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">{props.data?.location}</Card.Subtitle>\r\n        <Card.Text>Balance: {fromWei(balance)} ETH</Card.Text>\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Form onSubmit={onSign}>\r\n            <Accordion.Item eventKey=\"0\">\r\n              <Accordion.Header>Sign a payment order</Accordion.Header>\r\n              <Accordion.Body>\r\n                <FloatingLabel label=\"Claimer Address\" className=\"mb-3\">\r\n                  <FormControl name=\"targetAddress\" placeholder=\"0x0...\" required />\r\n                </FloatingLabel>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl name=\"allowedAmount\" placeholder=\"0.0000\" required />\r\n                  <InputGroup.Text>ETH</InputGroup.Text>\r\n                </InputGroup>\r\n                <LoaderButton type=\"submit\" showLoader={signLoader}>\r\n                  &nbsp;Generate Signature&nbsp;\r\n                </LoaderButton>\r\n              </Accordion.Body>\r\n            </Accordion.Item>\r\n          </Form>\r\n        </Accordion>\r\n      </Card.Body>\r\n      <Card.Footer className=\"d-flex justify-content-end\">\r\n        <OverlayTrigger placement=\"left\" overlay={<Tooltip id=\"money-tooltip\">Deposit funds</Tooltip>}>\r\n          <Button className=\"icon-button\" variant=\"dark\" onClick={props.onDeposit}>\r\n            <FaMoneyBillAlt />\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"trash-tooltip\">Destroy this contract</Tooltip>}>\r\n          <Button className=\"icon-button\" variant=\"danger\" onClick={() => props.onDelete(props.data?.location as string)}>\r\n            <FaTrash />\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ContractDetails;\r\n","import React, { FC } from 'react';\r\nimport { Button, Modal, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { FaCopy } from 'react-icons/fa';\r\n\r\nimport '../styles/Company.scss';\r\nimport { ClaimInfo } from '../assets/formData/ClaimInfo';\r\n\r\ninterface ISignatureDetailsModal {\r\n  claimInfo: ClaimInfo;\r\n  show: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nconst SignatureDetailsModal: FC<ISignatureDetailsModal> = (props: ISignatureDetailsModal) => (\r\n  <Modal show={props.show} onHide={props.onClose} centered backdrop=\"static\">\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>Signature details</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <p style={{ color: 'red' }}>\r\n        Make sure to <b>copy all these values before closing this modal</b>. You won&apos;t be able to get them again.\r\n      </p>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Text>Allowed Address</InputGroup.Text>\r\n        <FormControl aria-label=\"Adress allowed to make the claim\" placeholder=\"0x0\" disabled value={props.claimInfo.claimerAddress} />\r\n        <Button className=\"form-button\" variant=\"outline-dark\">\r\n          <FaCopy />\r\n        </Button>\r\n      </InputGroup>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Text>Contract Address</InputGroup.Text>\r\n        <FormControl aria-label=\"Contract Adress where to make the the claim\" placeholder=\"0x0\" disabled value={props.claimInfo.contractAddress} />\r\n        <Button className=\"form-button\" variant=\"outline-dark\">\r\n          <FaCopy />\r\n        </Button>\r\n      </InputGroup>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Text>Allowed Amount</InputGroup.Text>\r\n        <FormControl aria-label=\"Allowed amount to claim in eth\" placeholder=\"0.0000\" disabled value={props.claimInfo.amount} />\r\n        <Button className=\"form-button\" variant=\"outline-dark\">\r\n          <FaCopy />\r\n        </Button>\r\n      </InputGroup>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Text>Nonce</InputGroup.Text>\r\n        <FormControl aria-label=\"Unique nonce for claim order\" placeholder=\"0\" disabled value={props.claimInfo.nonce} />\r\n        <Button className=\"form-button\" variant=\"outline-dark\">\r\n          <FaCopy />\r\n        </Button>\r\n      </InputGroup>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Text>Signature</InputGroup.Text>\r\n        <FormControl aria-label=\"Generated signature hash\" placeholder=\"0x0\" disabled value={props.claimInfo.signature} />\r\n        <Button className=\"form-button\" variant=\"outline-dark\">\r\n          <FaCopy />\r\n        </Button>\r\n      </InputGroup>\r\n    </Modal.Body>\r\n  </Modal>\r\n);\r\n\r\nexport default SignatureDetailsModal;\r\n","import React, { FC } from 'react';\nimport { Route, Routes, HashRouter } from 'react-router-dom';\nimport './styles/App.scss';\nimport Home from './components/Home';\nimport Contractor from './components/Contractor';\nimport Company from './components/Company';\n\nconst App: FC = () => (\n  <div className=\"app\">\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/contractor\" element={<Contractor />} />\n        <Route path=\"/company\" element={<Company />} />\n      </Routes>\n    </HashRouter>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/custom.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SmartContractContextProvider } from './context/SmartContractContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SmartContractContextProvider>\n      <App />\n    </SmartContractContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}